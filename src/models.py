from tensorflow.keras.models import Sequential, load_model, Model
from tensorflow.keras.layers import Dense, LSTM, Activation, BatchNormalization, Input, Multiply, Lambda
from tensorflow.keras.layers import Bidirectional, Conv1D, MaxPool1D, AvgPool1D, GlobalAvgPool1D, GlobalMaxPool1D
from tensorflow.keras.optimizers import Adam, SGD

import tensorflow.keras.backend as K

#from keras.layers import CuDNNLSTM, CuDNNGRU, AtrousConv1D, merge
#from tensorflow.keras.layers import CuDNNLSTM
from tensorflow.keras.layers import LSTM as CuDNNLSTM

def get_model_mk1():
    model = Sequential()
    model.add(Bidirectional(CuDNNLSTM(128, return_sequences=True), merge_mode='concat', input_shape=(None,2)))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(128, return_sequences=True), merge_mode='concat'))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(64, return_sequences=True), merge_mode='concat'))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(64, return_sequences=False), merge_mode='concat'))
    model.add(BatchNormalization())
    model.add(BatchNormalization())
    model.add(Dense(len(datagen.knot_classes)))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    return model


def get_model_new():
    model = Sequential()
    model.add(Bidirectional(CuDNNLSTM(256, return_sequences=True), merge_mode='concat', input_shape=(None,4)))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(256, return_sequences=True), merge_mode='concat'))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(256, return_sequences=True), merge_mode='concat'))
    model.add(BatchNormalization())
    model.add(Bidirectional(CuDNNLSTM(256, return_sequences=False), merge_mode='concat')) 
    model.add(BatchNormalization())
    model.add(Dense(512))
    model.add(BatchNormalization())
    model.add(Activation('relu'))    
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    return model


def get_model_shallow():
    model = Sequential()
    model.add(Bidirectional(CuDNNGRU(1024, return_sequences=False), merge_mode='concat', input_shape=(None,2)))
    model.add(BatchNormalization())
    model.add(Dense(512))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dense(8))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    return model


def get_model_conv():
    model = Sequential()
    model.add(Conv1D(1024,3, input_shape=(None,2)))
    model.add(BatchNormalization())
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Conv1D(512,3))
    model.add(BatchNormalization())
    model.add(Activation('relu'))
    model.add(Conv1D(256,3))
    model.add(BatchNormalization())
    model.add(Activation('relu'))
    model.add(Conv1D(128,3))
    model.add(BatchNormalization())
    model.add(Activation('relu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model


def get_model_conv_mk2():
    inputs = Input(shape=(None,2))
    conv1 = AtrousConv1D(512, 3, atrous_rate=1,border_mode='same', activation='relu')(inputs)    
    conv2 = AtrousConv1D(512, 3, atrous_rate=2,border_mode='same', activation='relu')(conv1)
    conv3 = AtrousConv1D(512, 3, atrous_rate=4,border_mode='same', activation='relu')(conv2)
    attn_conv1 = AtrousConv1D(128, 3, atrous_rate=1,border_mode='same', activation='relu')(conv3)
    attn_conv2 = AtrousConv1D(1, 3, atrous_rate=1,border_mode='same', activation='softmax', bias_initializer='ones')(attn_conv1)
    def repetition(x):
        return K.repeat_elements(x, 512, -1)
    attn_coef_repeated = Lambda(repetition)(attn_conv2)
    merged_attn = Multiply()([conv3, attn_coef_repeated])
    compressed_features = GlobalAvgPool1D()(merged_attn)
    dense1 = Dense(2048, activation='relu')(compressed_features)
    dense2 = Dense(2048, activation='relu')(dense1)
    dense3 = Dense(36, activation='softmax')(dense2)
    model = Model(inputs=inputs, outputs=dense3)
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_conv_mk3():
    inputs = Input(shape=(None,4))
    #conv1 = AtrousConv1D(512, 3, atrous_rate=1,border_mode='same', activation='relu')(inputs)
    conv1 = Conv1D(512, 3, dilation_rate=1,padding='same', activation='relu')(inputs) 
    #conv2 = AtrousConv1D(512, 3, atrous_rate=2,border_mode='same', activation='relu')(conv1)
    conv2 = Conv1D(512, 3, dilation_rate=2,padding='same', activation='relu')(conv1)
    #conv3 = AtrousConv1D(512, 3, atrous_rate=4,border_mode='same', activation='relu')(conv2)
    conv3 = Conv1D(512, 3, dilation_rate=4,padding='same', activation='relu')(conv2)
    #conv4 = AtrousConv1D(512, 3, atrous_rate=4,border_mode='same', activation='relu')(conv3)
    conv4 = Conv1D(512, 3, dilation_rate=4,padding='same', activation='relu')(conv3)
    #attn_conv1 = AtrousConv1D(128, 3, atrous_rate=1,border_mode='same', activation='relu')(conv4)
    attn_conv1 = Conv1D(128, 3, dilation_rate=1,padding='same', activation='relu')(conv4)
    #attn_conv1 = AtrousConv1D(128, 3, atrous_rate=1,border_mode='same', activation='relu')(conv4)
    #attn_conv2 = AtrousConv1D(1, 3, atrous_rate=1,border_mode='same', activation='softmax', bias_initializer='ones')(attn_conv1)
    attn_conv2 = Conv1D(1, 3, dilation_rate=1,padding='same', activation='softmax', bias_initializer='ones')(attn_conv1)
    def repetition(x):
        return K.repeat_elements(x, 512, -1)
    attn_coef_repeated = Lambda(repetition)(attn_conv2)
    merged_attn = Multiply()([conv3, attn_coef_repeated])
    compressed_features = GlobalAvgPool1D()(merged_attn)
    dense1 = Dense(1024, activation='relu')(compressed_features)
    dense2 = Dense(2048, activation='relu')(dense1)
    dense3 = Dense(15, activation='softmax')(dense2)
    model = Model(inputs=inputs, outputs=dense3)
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_conv_mk2_noattn():
    inputs = Input(shape=(None,2))
    conv1 = AtrousConv1D(512, 3, atrous_rate=1,border_mode='same', activation='relu')(inputs)    
    conv2 = AtrousConv1D(512, 3, atrous_rate=2,border_mode='same', activation='relu')(conv1)
    conv3 = AtrousConv1D(512, 3, atrous_rate=4,border_mode='same', activation='relu')(conv2)
    compressed_features = GlobalAvgPool1D()(conv3)
    dense1 = Dense(1024, activation='relu')(compressed_features)
    dense2 = Dense(2048, activation='relu')(dense1)
    dense3 = Dense(8, activation='softmax')(dense2)
    model = Model(inputs=inputs, outputs=dense3)
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model



def get_model_mk4():
    model = Sequential()
    model.add(Conv1D(16, 5, input_shape=(None,4)))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(16, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(16, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(CuDNNLSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(CuDNNLSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_mk5():
    model = Sequential()
    model.add(Conv1D(16, 5, input_shape=(None,4)))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(16, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(16, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_mk6():
    model = Sequential()
    model.add(Conv1D(256, 5, input_shape=(None,4)))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(256, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(256, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(512))
    model.add(Activation('elu'))
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    opt = Adam(1e-4)
    model.compile(opt, 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_mk7():
    model = Sequential()
    model.add(Conv1D(512, 5, input_shape=(None,4)))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(512, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(512, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(512, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(512, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(1024))
    model.add(Activation('elu'))
    model.add(Dense(1024))
    model.add(Activation('elu'))
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    opt = Adam(1e-4)
    model.compile(opt, 'categorical_crossentropy', metrics=['accuracy'])
    return model

def get_model_mk7():
    model = Sequential()
    model.add(Conv1D(512, 5, input_shape=(None,4)))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(512, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(512, 5))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(512, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(512, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(Dense(2048))
    model.add(Activation('elu'))
    model.add(Dense(2048))
    model.add(Activation('elu'))
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    opt = Adam(1e-4)
    model.compile(opt, 'categorical_crossentropy', metrics=['accuracy'])
    return model


def get_model_mk6_bn():
    model = Sequential()
    model.add(Conv1D(256, 5, input_shape=(None,4)))
    model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(256, 5))
    model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Conv1D(256, 5))
    model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(Bidirectional(LSTM(128, return_sequences=True), merge_mode='concat'))
    #model.add(BatchNormalization())
    model.add(Activation('elu'))
    model.add(GlobalAvgPool1D())
    model.add(BatchNormalization())
    model.add(Dense(512))
    model.add(Activation('elu'))
    model.add(BatchNormalization())
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    opt = Adam(1e-4)
    model.compile(opt, 'categorical_crossentropy', metrics=['accuracy'])
    return model


def get_model_simple_lstm():
    model = Sequential()
    #model.add(Bidirectional(CuDNNLSTM(1024, return_sequences=True), merge_mode='concat', input_shape=(None,4)))
    model.add(Bidirectional(LSTM(1024, return_sequences=True), merge_mode='concat', input_shape=(None,4)))
    model.add(GlobalAvgPool1D())
    model.add(Dense(36))
    #model.add(Activation('sigmoid'))
    model.add(Activation('softmax'))
    opt = Adam(1e-4)
    model.compile(opt, 'categorical_crossentropy', metrics=['accuracy'])
    return model